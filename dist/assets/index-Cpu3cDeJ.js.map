{"version":3,"file":"index-Cpu3cDeJ.js","sources":["../../src/configuration/gameConstants.ts","../../src/configuration/assetPaths.ts","../../src/assetManagement/AssetLoader.ts","../../src/gameSystems/inputHandling/KeyboardInputManager.ts","../../src/gameSystems/inputHandling/MouseInputManager.ts","../../src/gameSystems/playerCharacter/PlayerMovementSystem.ts","../../src/gameSystems/plantGrowth/PlantManagementSystem.ts","../../src/gameSystems/rendering/BackgroundRenderer.ts","../../src/gameSystems/rendering/PlantRenderer.ts","../../src/gameSystems/rendering/PlayerCharacterRenderer.ts","../../src/core/GameEngine.ts","../../src/main.ts"],"sourcesContent":["/**\n * Game configuration constants\n */\n\n// Sprite sheet configuration\nexport const SPRITE_SHEET_CONFIG = {\n  columns: 9,\n  rows: 4,\n} as const;\n\n// Animation directions (row indices in sprite sheet)\nexport const SPRITE_DIRECTIONS = {\n  up: 0,\n  left: 1,\n  down: 2,\n  right: 3,\n} as const;\n\n// Rendering configuration\nexport const RENDER_CONFIG = {\n  /** Scale factor for all sprites */\n  scale: 3,\n  /** Animation frames per second */\n  framesPerSecond: 10,\n} as const;\n\n// Player movement configuration\nexport const PLAYER_CONFIG = {\n  /** Movement speed in pixels per second */\n  movementSpeed: 180,\n} as const;\n\n// Plant system configuration\nexport const PLANT_CONFIG = {\n  /** Base size for plant rendering calculations */\n  size: 12,\n  /** Time in seconds for plants to grow from seed to mature */\n  growthDurationSeconds: 10,\n  /** Minimum distance between plants to prevent overcrowding */\n  spacingThreshold: 30,\n  /** Scale factor for seed sprites (smaller than mature plants) */\n  seedScaleFactor: 0.5,\n} as const;\n\n// Canvas configuration\nexport const CANVAS_CONFIG = {\n  width: 800,\n  height: 560,\n} as const;","/**\n * Asset path configurations\n */\n\nimport { AssetPaths } from '../types/index';\n\nexport const ASSET_PATHS: AssetPaths = {\n  playerSpriteSheet: '/src/gameAssets/sprites/walk.png',\n  homeBackground: '/src/gameAssets/maps/home.png',\n  barrenBackground: '/src/gameAssets/maps/home_barren.png',\n  seedSprite: '/src/gameAssets/cursedLand/objectsSeparately/rock1Shadow11.png',\n  plantSprites: {\n    eye: '/src/gameAssets/cursedLand/objectsSeparately/eyePlantShadow11.png',\n    tentacle: '/src/gameAssets/cursedLand/objectsSeparately/tentaclePlantShadow11.png',\n    jaws: '/src/gameAssets/cursedLand/objectsSeparately/jawsPlantShadow11.png',\n    spike: '/src/gameAssets/cursedLand/objectsSeparately/spikePlantShadow11.png',\n  },\n};","/**\n * Asset loading and management system\n */\n\nimport { GameAssets, PlantType } from '../types/index';\nimport { ASSET_PATHS } from '../configuration/index';\n\nexport class AssetLoader {\n  private assets: GameAssets;\n  private loadedCount = 0;\n  private totalAssets = 0;\n  private isBarrenBackgroundAvailable = false;\n\n  constructor() {\n    this.assets = {\n      playerSprite: new Image(),\n      homeBackground: new Image(),\n      barrenBackground: new Image(),\n      seedSprite: new Image(),\n      plantSprites: {\n        eye: new Image(),\n        tentacle: new Image(),\n        jaws: new Image(),\n        spike: new Image(),\n      },\n    };\n  }\n\n  /**\n   * Load all game assets\n   */\n  public async loadAllAssets(): Promise<GameAssets> {\n    this.calculateTotalAssets();\n    \n    // Load basic assets\n    this.loadAsset(this.assets.playerSprite, ASSET_PATHS.playerSpriteSheet);\n    this.loadAsset(this.assets.homeBackground, ASSET_PATHS.homeBackground);\n    this.loadAsset(this.assets.seedSprite, ASSET_PATHS.seedSprite);\n    \n    // Load barren background with error handling\n    this.loadBarrenBackground();\n    \n    // Load plant sprites\n    Object.entries(ASSET_PATHS.plantSprites).forEach(([plantType, path]) => {\n      this.loadAsset(this.assets.plantSprites[plantType as PlantType], path);\n    });\n\n    return this.assets;\n  }\n\n  /**\n   * Get the loaded assets\n   */\n  public getAssets(): GameAssets {\n    return this.assets;\n  }\n\n  /**\n   * Check if barren background is available\n   */\n  public isBarrenAvailable(): boolean {\n    return this.isBarrenBackgroundAvailable;\n  }\n\n  /**\n   * Get loading progress (0-1)\n   */\n  public getLoadingProgress(): number {\n    return this.totalAssets > 0 ? this.loadedCount / this.totalAssets : 0;\n  }\n\n  /**\n   * Check if all assets are loaded\n   */\n  public areAllAssetsLoaded(): boolean {\n    return this.loadedCount === this.totalAssets;\n  }\n\n  private calculateTotalAssets(): void {\n    this.totalAssets = 5 + Object.keys(ASSET_PATHS.plantSprites).length; // 5 base assets + plant sprites\n  }\n\n  private loadAsset(imageElement: HTMLImageElement, assetPath: string): void {\n    imageElement.onload = () => {\n      this.loadedCount++;\n      console.log(`Loaded asset: ${assetPath} (${this.loadedCount}/${this.totalAssets})`);\n    };\n    \n    imageElement.onerror = () => {\n      console.error(`Failed to load asset: ${assetPath}`);\n      this.loadedCount++; // Still count as \"loaded\" to prevent hanging\n    };\n    \n    imageElement.src = assetPath;\n  }\n\n  private loadBarrenBackground(): void {\n    this.assets.barrenBackground.onload = () => {\n      this.isBarrenBackgroundAvailable = true;\n      this.loadedCount++;\n      console.log(`Loaded barren background (${this.loadedCount}/${this.totalAssets})`);\n    };\n    \n    this.assets.barrenBackground.onerror = () => {\n      this.isBarrenBackgroundAvailable = false;\n      this.loadedCount++;\n      console.log('Barren background not available, using fallback pattern');\n    };\n    \n    this.assets.barrenBackground.src = ASSET_PATHS.barrenBackground;\n  }\n}","/**\n * Keyboard input handling system\n */\n\nexport class KeyboardInputManager {\n  private pressedKeys = new Set<string>();\n  private validKeys = [\n    'w', 'a', 's', 'd', 'p', 'b',\n    '1', '2', '3', '4'\n  ];\n\n  public initialize(): void {\n    addEventListener('keydown', this.handleKeyDown.bind(this));\n    addEventListener('keyup', this.handleKeyUp.bind(this));\n  }\n\n  public cleanup(): void {\n    removeEventListener('keydown', this.handleKeyDown.bind(this));\n    removeEventListener('keyup', this.handleKeyUp.bind(this));\n  }\n\n  public isKeyPressed(key: string): boolean {\n    return this.pressedKeys.has(key.toLowerCase());\n  }\n\n  public getPressedKeys(): Set<string> {\n    return new Set(this.pressedKeys);\n  }\n\n  private handleKeyDown(event: KeyboardEvent): void {\n    const keyPressed = event.key.toLowerCase();\n    \n    if (this.validKeys.includes(keyPressed)) {\n      this.pressedKeys.add(keyPressed);\n      event.preventDefault();\n    }\n  }\n\n  private handleKeyUp(event: KeyboardEvent): void {\n    this.pressedKeys.delete(event.key.toLowerCase());\n  }\n}","/**\n * Mouse input handling system\n */\n\nexport interface ClickPosition {\n  x: number;\n  y: number;\n}\n\nexport type ClickHandler = (position: ClickPosition) => void;\n\nexport class MouseInputManager {\n  private canvas: HTMLCanvasElement;\n  private clickHandlers: ClickHandler[] = [];\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n  }\n\n  public initialize(): void {\n    this.canvas.addEventListener('click', this.handleClick.bind(this));\n  }\n\n  public cleanup(): void {\n    this.canvas.removeEventListener('click', this.handleClick.bind(this));\n  }\n\n  public addClickHandler(handler: ClickHandler): void {\n    this.clickHandlers.push(handler);\n  }\n\n  public removeClickHandler(handler: ClickHandler): void {\n    const index = this.clickHandlers.indexOf(handler);\n    if (index > -1) {\n      this.clickHandlers.splice(index, 1);\n    }\n  }\n\n  private handleClick(event: MouseEvent): void {\n    const canvasRectangle = this.canvas.getBoundingClientRect();\n    const clickPosition: ClickPosition = {\n      x: event.clientX - canvasRectangle.left,\n      y: event.clientY - canvasRectangle.top,\n    };\n\n    this.clickHandlers.forEach(handler => handler(clickPosition));\n  }\n}","/**\n * Player character movement and animation system\n */\n\nimport { PlayerCharacter, PlayerMovementInput } from '../../types/index';\nimport { SPRITE_DIRECTIONS, PLAYER_CONFIG, RENDER_CONFIG, SPRITE_SHEET_CONFIG, CANVAS_CONFIG } from '../../configuration/index';\nimport { KeyboardInputManager } from '../inputHandling/index';\n\nexport class PlayerMovementSystem {\n  private playerCharacter: PlayerCharacter;\n  private inputManager: KeyboardInputManager;\n  private spriteFrameWidth = 0;\n  private spriteFrameHeight = 0;\n\n  constructor(inputManager: KeyboardInputManager) {\n    this.inputManager = inputManager;\n    this.playerCharacter = {\n      xPosition: CANVAS_CONFIG.width / 2,\n      yPosition: CANVAS_CONFIG.height / 2,\n      currentRow: SPRITE_DIRECTIONS.down,\n      currentFrame: 0,\n      animationTimer: 0,\n      isMoving: false,\n    };\n  }\n\n  public initializeSpriteDimensions(spriteWidth: number, spriteHeight: number): void {\n    this.spriteFrameWidth = Math.floor(spriteWidth / SPRITE_SHEET_CONFIG.columns);\n    this.spriteFrameHeight = Math.floor(spriteHeight / SPRITE_SHEET_CONFIG.rows);\n  }\n\n  public getPlayerCharacter(): PlayerCharacter {\n    return this.playerCharacter;\n  }\n\n  public updatePlayerMovement(deltaTimeSeconds: number): void {\n    const movementInput = this.calculateMovementInput();\n    this.applyMovement(movementInput, deltaTimeSeconds);\n    this.updateAnimation(movementInput, deltaTimeSeconds);\n    this.constrainToCanvas();\n    this.handleDirectionOverrides();\n  }\n\n  private calculateMovementInput(): PlayerMovementInput {\n    let horizontalMovement = 0;\n    let verticalMovement = 0;\n\n    if (this.inputManager.isKeyPressed('w')) {\n      verticalMovement -= 1;\n    }\n    if (this.inputManager.isKeyPressed('s')) {\n      verticalMovement += 1;\n    }\n    if (this.inputManager.isKeyPressed('a')) {\n      horizontalMovement -= 1;\n    }\n    if (this.inputManager.isKeyPressed('d')) {\n      horizontalMovement += 1;\n    }\n\n    const isMoving = horizontalMovement !== 0 || verticalMovement !== 0;\n\n    // Normalize diagonal movement\n    if (isMoving && horizontalMovement && verticalMovement) {\n      const diagonalNormalization = 1 / Math.sqrt(2);\n      horizontalMovement *= diagonalNormalization;\n      verticalMovement *= diagonalNormalization;\n    }\n\n    return { horizontalMovement, verticalMovement, isMoving };\n  }\n\n  private applyMovement(movementInput: PlayerMovementInput, deltaTimeSeconds: number): void {\n    this.playerCharacter.isMoving = movementInput.isMoving;\n\n    // Update player direction based on movement\n    if (Math.abs(movementInput.horizontalMovement) > Math.abs(movementInput.verticalMovement)) {\n      this.playerCharacter.currentRow = movementInput.horizontalMovement > 0 \n        ? SPRITE_DIRECTIONS.right \n        : SPRITE_DIRECTIONS.left;\n    } else if (Math.abs(movementInput.verticalMovement) > 0) {\n      this.playerCharacter.currentRow = movementInput.verticalMovement > 0 \n        ? SPRITE_DIRECTIONS.down \n        : SPRITE_DIRECTIONS.up;\n    }\n\n    // Apply movement\n    this.playerCharacter.xPosition += movementInput.horizontalMovement * PLAYER_CONFIG.movementSpeed * deltaTimeSeconds;\n    this.playerCharacter.yPosition += movementInput.verticalMovement * PLAYER_CONFIG.movementSpeed * deltaTimeSeconds;\n  }\n\n  private updateAnimation(movementInput: PlayerMovementInput, deltaTimeSeconds: number): void {\n    const secondsPerFrame = 1 / RENDER_CONFIG.framesPerSecond;\n    \n    if (movementInput.isMoving) {\n      this.playerCharacter.animationTimer += deltaTimeSeconds;\n      while (this.playerCharacter.animationTimer >= secondsPerFrame) {\n        this.playerCharacter.currentFrame = (this.playerCharacter.currentFrame + 1) % SPRITE_SHEET_CONFIG.columns;\n        this.playerCharacter.animationTimer -= secondsPerFrame;\n      }\n    } else {\n      this.playerCharacter.currentFrame = 0; // Idle frame\n      this.playerCharacter.animationTimer = 0;\n    }\n  }\n\n  private constrainToCanvas(): void {\n    if (this.spriteFrameWidth === 0 || this.spriteFrameHeight === 0) return;\n\n    const displayWidth = this.spriteFrameWidth * RENDER_CONFIG.scale;\n    const displayHeight = this.spriteFrameHeight * RENDER_CONFIG.scale;\n    const halfWidth = displayWidth / 2;\n    const halfHeight = displayHeight / 2;\n\n    this.playerCharacter.xPosition = Math.max(\n      halfWidth, \n      Math.min(CANVAS_CONFIG.width - halfWidth, this.playerCharacter.xPosition)\n    );\n    this.playerCharacter.yPosition = Math.max(\n      halfHeight, \n      Math.min(CANVAS_CONFIG.height - halfHeight, this.playerCharacter.yPosition)\n    );\n  }\n\n  private handleDirectionOverrides(): void {\n    // Force direction for testing\n    if (this.inputManager.isKeyPressed('1')) this.playerCharacter.currentRow = SPRITE_DIRECTIONS.up;\n    if (this.inputManager.isKeyPressed('2')) this.playerCharacter.currentRow = SPRITE_DIRECTIONS.left;\n    if (this.inputManager.isKeyPressed('3')) this.playerCharacter.currentRow = SPRITE_DIRECTIONS.down;\n    if (this.inputManager.isKeyPressed('4')) this.playerCharacter.currentRow = SPRITE_DIRECTIONS.right;\n  }\n}","/**\n * Plant growth and management system\n */\n\nimport { PlantEntity, PlantType } from '../../types/index';\nimport { PLANT_CONFIG } from '../../configuration/index';\nimport { ClickPosition } from '../inputHandling/index';\n\nexport class PlantManagementSystem {\n  private plantedEntities: PlantEntity[] = [];\n  private readonly availablePlantTypes: PlantType[] = ['eye', 'tentacle', 'jaws', 'spike'];\n\n  public getPlantedEntities(): PlantEntity[] {\n    return this.plantedEntities;\n  }\n\n  public updatePlantGrowth(): void {\n    const currentTime = performance.now();\n    \n    this.plantedEntities.forEach(plant => {\n      if (!plant.hasGrown) {\n        const elapsedTimeSeconds = (currentTime - plant.plantingTime) / 1000;\n        if (elapsedTimeSeconds >= PLANT_CONFIG.growthDurationSeconds) {\n          plant.hasGrown = true;\n          console.log(`Plant at (${plant.xPosition}, ${plant.yPosition}) has grown into a ${plant.plantType} plant!`);\n        }\n      }\n    });\n  }\n\n  public handlePlantingClick(clickPosition: ClickPosition): void {\n    // Check if there's already a plant nearby\n    const existingPlantNearby = this.plantedEntities.find(plant =>\n      Math.abs(plant.xPosition - clickPosition.x) < PLANT_CONFIG.spacingThreshold &&\n      Math.abs(plant.yPosition - clickPosition.y) < PLANT_CONFIG.spacingThreshold\n    );\n\n    if (!existingPlantNearby) {\n      this.plantSeed(clickPosition);\n    }\n  }\n\n  public getPlantCount(): { total: number; seeds: number; mature: number } {\n    const total = this.plantedEntities.length;\n    const mature = this.plantedEntities.filter(plant => plant.hasGrown).length;\n    const seeds = total - mature;\n    \n    return { total, seeds, mature };\n  }\n\n  public clearAllPlants(): void {\n    this.plantedEntities = [];\n  }\n\n  private plantSeed(position: ClickPosition): void {\n    const randomPlantType = this.getRandomPlantType();\n    \n    const newPlant: PlantEntity = {\n      xPosition: position.x,\n      yPosition: position.y,\n      plantingTime: performance.now(),\n      hasGrown: false,\n      plantType: randomPlantType,\n    };\n\n    this.plantedEntities.push(newPlant);\n    console.log(`Planted ${randomPlantType} seed at (${position.x}, ${position.y})`);\n  }\n\n  private getRandomPlantType(): PlantType {\n    const randomIndex = Math.floor(Math.random() * this.availablePlantTypes.length);\n    return this.availablePlantTypes[randomIndex];\n  }\n}","/**\n * Background rendering system\n */\n\nimport { GameAssets } from '../../types/index';\nimport { CANVAS_CONFIG } from '../../configuration/index';\n\nexport class BackgroundRenderer {\n  private renderingContext: CanvasRenderingContext2D;\n  private useBarrenBackground = true;\n  private cachedBarrenPattern: CanvasPattern | null = null;\n\n  constructor(renderingContext: CanvasRenderingContext2D) {\n    this.renderingContext = renderingContext;\n  }\n\n  public setUseBarrenBackground(useBarren: boolean): void {\n    this.useBarrenBackground = useBarren;\n  }\n\n  public isUsingBarrenBackground(): boolean {\n    return this.useBarrenBackground;\n  }\n\n  public renderBackground(assets: GameAssets, isBarrenAvailable: boolean): void {\n    const backgroundImage = (this.useBarrenBackground && isBarrenAvailable)\n      ? assets.barrenBackground\n      : assets.homeBackground;\n\n    if (backgroundImage.complete && backgroundImage.naturalWidth > 0) {\n      this.renderBackgroundImage(backgroundImage);\n    } else {\n      this.renderProceduralBarrenBackground();\n    }\n  }\n\n  private renderBackgroundImage(backgroundImage: HTMLImageElement): void {\n    this.renderingContext.drawImage(\n      backgroundImage,\n      0, 0,\n      CANVAS_CONFIG.width,\n      CANVAS_CONFIG.height\n    );\n  }\n\n  private renderProceduralBarrenBackground(): void {\n    const barrenPattern = this.generateBarrenPattern();\n    if (barrenPattern) {\n      this.renderingContext.save();\n      this.renderingContext.fillStyle = barrenPattern;\n      this.renderingContext.fillRect(0, 0, CANVAS_CONFIG.width, CANVAS_CONFIG.height);\n      this.renderingContext.restore();\n    }\n  }\n\n  private generateBarrenPattern(): CanvasPattern | null {\n    if (this.cachedBarrenPattern) return this.cachedBarrenPattern;\n\n    const patternCanvas = document.createElement('canvas');\n    patternCanvas.width = 32;\n    patternCanvas.height = 32;\n    const patternContext = patternCanvas.getContext('2d');\n\n    if (!patternContext) return null;\n\n    patternContext.imageSmoothingEnabled = false;\n\n    // Create alien soil pattern\n    patternContext.fillStyle = '#1a2324';\n    patternContext.fillRect(0, 0, 32, 32);\n\n    patternContext.fillStyle = '#202c2e';\n    patternContext.fillRect(0, 0, 16, 16);\n    patternContext.fillRect(16, 16, 16, 16);\n\n    patternContext.fillStyle = '#233335';\n    for (let speckleIndex = 0; speckleIndex < 24; speckleIndex++) {\n      const speckleX = Math.floor(Math.random() * 32);\n      const speckleY = Math.floor(Math.random() * 32);\n      patternContext.fillRect(speckleX, speckleY, 1, 1);\n    }\n\n    this.cachedBarrenPattern = this.renderingContext.createPattern(patternCanvas, 'repeat');\n    return this.cachedBarrenPattern;\n  }\n}","/**\n * Plant rendering system\n */\n\nimport { PlantEntity, GameAssets } from '../../types/index';\nimport { RENDER_CONFIG, PLANT_CONFIG } from '../../configuration/index';\n\nexport class PlantRenderer {\n  private renderingContext: CanvasRenderingContext2D;\n\n  constructor(renderingContext: CanvasRenderingContext2D) {\n    this.renderingContext = renderingContext;\n  }\n\n  public renderAllPlants(plants: PlantEntity[], assets: GameAssets): void {\n    plants.forEach(plant => {\n      this.renderSinglePlant(plant, assets);\n    });\n  }\n\n  private renderSinglePlant(plant: PlantEntity, assets: GameAssets): void {\n    this.renderingContext.save();\n    \n    if (plant.hasGrown) {\n      this.renderMaturePlant(plant, assets);\n    } else {\n      this.renderSeedPlant(plant, assets);\n    }\n    \n    this.renderingContext.restore();\n  }\n\n  private renderMaturePlant(plant: PlantEntity, assets: GameAssets): void {\n    const plantSprite = assets.plantSprites[plant.plantType];\n    \n    if (plantSprite.complete && plantSprite.naturalWidth > 0) {\n      this.renderPlantSprite(plantSprite, plant.xPosition, plant.yPosition, RENDER_CONFIG.scale);\n    } else {\n      this.renderFallbackMaturePlant(plant.xPosition, plant.yPosition);\n    }\n  }\n\n  private renderSeedPlant(plant: PlantEntity, assets: GameAssets): void {\n    if (assets.seedSprite.complete && assets.seedSprite.naturalWidth > 0) {\n      const seedScale = RENDER_CONFIG.scale * PLANT_CONFIG.seedScaleFactor;\n      this.renderPlantSprite(assets.seedSprite, plant.xPosition, plant.yPosition, seedScale);\n    } else {\n      this.renderFallbackSeed(plant.xPosition, plant.yPosition);\n    }\n  }\n\n  private renderPlantSprite(\n    sprite: HTMLImageElement, \n    xPosition: number, \n    yPosition: number, \n    scale: number\n  ): void {\n    const spriteWidth = sprite.naturalWidth;\n    const spriteHeight = sprite.naturalHeight;\n    const drawWidth = spriteWidth * scale;\n    const drawHeight = spriteHeight * scale;\n\n    this.renderingContext.drawImage(\n      sprite,\n      xPosition - drawWidth / 2,\n      yPosition - drawHeight / 2,\n      drawWidth,\n      drawHeight\n    );\n  }\n\n  private renderFallbackMaturePlant(xPosition: number, yPosition: number): void {\n    // Fallback: green rectangle for grown plant\n    this.renderingContext.fillStyle = '#228B22';\n    this.renderingContext.fillRect(\n      xPosition - PLANT_CONFIG.size,\n      yPosition - PLANT_CONFIG.size * 2,\n      PLANT_CONFIG.size * 2,\n      PLANT_CONFIG.size * 2\n    );\n  }\n\n  private renderFallbackSeed(xPosition: number, yPosition: number): void {\n    // Fallback: brown square for seed\n    this.renderingContext.fillStyle = '#8B4513';\n    this.renderingContext.fillRect(\n      xPosition - 4, \n      yPosition - 4, \n      8, \n      8\n    );\n  }\n}","/**\n * Player character rendering system\n */\n\nimport { PlayerCharacter, GameAssets, SpriteConfiguration } from '../../types/index';\nimport { RENDER_CONFIG } from '../../configuration/index';\n\nexport class PlayerCharacterRenderer {\n  private renderingContext: CanvasRenderingContext2D;\n  private spriteConfig: SpriteConfiguration = { columns: 0, rows: 0, frameWidth: 0, frameHeight: 0 };\n\n  constructor(renderingContext: CanvasRenderingContext2D) {\n    this.renderingContext = renderingContext;\n  }\n\n  public initializeSpriteDimensions(spriteWidth: number, spriteHeight: number, columns: number, rows: number): void {\n    this.spriteConfig = {\n      columns,\n      rows,\n      frameWidth: Math.floor(spriteWidth / columns),\n      frameHeight: Math.floor(spriteHeight / rows),\n    };\n  }\n\n  public renderPlayerCharacter(player: PlayerCharacter, assets: GameAssets): void {\n    if (!assets.playerSprite.complete || this.spriteConfig.frameWidth === 0) {\n      return;\n    }\n\n    const sourceX = player.currentFrame * this.spriteConfig.frameWidth;\n    const sourceY = player.currentRow * this.spriteConfig.frameHeight;\n    const displayWidth = this.spriteConfig.frameWidth * RENDER_CONFIG.scale;\n    const displayHeight = this.spriteConfig.frameHeight * RENDER_CONFIG.scale;\n\n    this.renderingContext.drawImage(\n      assets.playerSprite,\n      sourceX, sourceY, \n      this.spriteConfig.frameWidth, \n      this.spriteConfig.frameHeight,\n      Math.round(player.xPosition - displayWidth / 2),\n      Math.round(player.yPosition - displayHeight / 2),\n      displayWidth, \n      displayHeight\n    );\n  }\n\n  public getSpriteConfiguration(): SpriteConfiguration {\n    return this.spriteConfig;\n  }\n}","/**\n * Main game engine that orchestrates all game systems\n */\n\nimport { GameAssets } from '../types/index';\nimport { CANVAS_CONFIG, SPRITE_SHEET_CONFIG } from '../configuration/index';\nimport { AssetLoader } from '../assetManagement/index';\nimport {\n  KeyboardInputManager,\n  MouseInputManager,\n  PlayerMovementSystem,\n  PlantManagementSystem,\n  BackgroundRenderer,\n  PlantRenderer,\n  PlayerCharacterRenderer\n} from '../gameSystems/index';\n\nexport class GameEngine {\n  private canvas: HTMLCanvasElement;\n  private renderingContext: CanvasRenderingContext2D;\n\n  // System managers\n  private assetLoader: AssetLoader;\n  private keyboardInput: KeyboardInputManager;\n  private mouseInput: MouseInputManager;\n  private playerMovement: PlayerMovementSystem;\n  private plantManagement: PlantManagementSystem;\n\n  // Renderers\n  private backgroundRenderer: BackgroundRenderer;\n  private plantRenderer: PlantRenderer;\n  private playerRenderer: PlayerCharacterRenderer;\n\n  // Game state\n  private gameAssets!: GameAssets;\n  private isRunning = false;\n  private lastTimestamp = 0;\n\n  constructor(canvasElementId: string) {\n    const canvas = document.getElementById(canvasElementId) as HTMLCanvasElement;\n    if (!canvas) {\n      throw new Error(`Canvas element with id '${canvasElementId}' not found`);\n    }\n\n    const context = canvas.getContext('2d');\n    if (!context) {\n      throw new Error('Canvas 2D context not available');\n    }\n\n    this.canvas = canvas;\n    this.renderingContext = context;\n    this.renderingContext.imageSmoothingEnabled = false;\n\n    // Initialize systems\n    this.assetLoader = new AssetLoader();\n    this.keyboardInput = new KeyboardInputManager();\n    this.mouseInput = new MouseInputManager(this.canvas);\n    this.playerMovement = new PlayerMovementSystem(this.keyboardInput);\n    this.plantManagement = new PlantManagementSystem();\n\n    // Initialize renderers\n    this.backgroundRenderer = new BackgroundRenderer(this.renderingContext);\n    this.plantRenderer = new PlantRenderer(this.renderingContext);\n    this.playerRenderer = new PlayerCharacterRenderer(this.renderingContext);\n  }\n\n  public async initialize(): Promise<void> {\n    console.log('Initializing Growing Stars game engine...');\n\n    // Load all assets\n    this.gameAssets = await this.assetLoader.loadAllAssets();\n\n    // Initialize input systems\n    this.keyboardInput.initialize();\n    this.mouseInput.initialize();\n\n    // Set up plant placement on P key press\n    this.setupPlantingInput();\n\n    // Initialize sprite dimensions when player sprite loads\n    this.gameAssets.playerSprite.onload = () => {\n      this.initializeSpriteDimensions();\n    };\n\n    // If sprite is already loaded, initialize dimensions immediately\n    if (this.gameAssets.playerSprite.complete) {\n      this.initializeSpriteDimensions();\n    }\n\n    console.log('Game engine initialized successfully');\n  }\n\n  public start(): void {\n    if (this.isRunning) {\n      console.warn('Game is already running');\n      return;\n    }\n\n    this.isRunning = true;\n    this.lastTimestamp = performance.now();\n    requestAnimationFrame(this.gameLoop.bind(this));\n    console.log('Game started');\n  }\n\n  public stop(): void {\n    this.isRunning = false;\n    this.keyboardInput.cleanup();\n    this.mouseInput.cleanup();\n    console.log('Game stopped');\n  }\n\n  private setupPlantingInput(): void {\n    // Handle P key for planting\n    let lastPlantTime = 0;\n    const PLANT_COOLDOWN = 500; // 500ms cooldown between plants\n\n    const plantingHandler = () => {\n      if (this.keyboardInput.isKeyPressed('p')) {\n        const currentTime = performance.now();\n        if (currentTime - lastPlantTime > PLANT_COOLDOWN) {\n          const player = this.playerMovement.getPlayerCharacter();\n          this.plantManagement.handlePlantingClick({\n            x: player.xPosition,\n            y: player.yPosition\n          });\n          lastPlantTime = currentTime;\n        }\n      }\n    };\n\n    // Check for P key every frame (will be called in game loop)\n    this.plantingInputHandler = plantingHandler;\n  }\n\n  private plantingInputHandler?: () => void;\n\n  private initializeSpriteDimensions(): void {\n    const spriteWidth = this.gameAssets.playerSprite.naturalWidth;\n    const spriteHeight = this.gameAssets.playerSprite.naturalHeight;\n\n    this.playerMovement.initializeSpriteDimensions(spriteWidth, spriteHeight);\n    this.playerRenderer.initializeSpriteDimensions(\n      spriteWidth,\n      spriteHeight,\n      SPRITE_SHEET_CONFIG.columns,\n      SPRITE_SHEET_CONFIG.rows\n    );\n\n    console.log(`Loaded sprite sheet: ${spriteWidth}x${spriteHeight} → frame ${Math.floor(spriteWidth / SPRITE_SHEET_CONFIG.columns)}x${Math.floor(spriteHeight / SPRITE_SHEET_CONFIG.rows)} (grid ${SPRITE_SHEET_CONFIG.columns}x${SPRITE_SHEET_CONFIG.rows})`);\n  }\n\n  private gameLoop(currentTimestamp: number): void {\n    if (!this.isRunning) return;\n\n    const deltaTimeSeconds = (currentTimestamp - this.lastTimestamp) / 1000;\n    this.lastTimestamp = currentTimestamp;\n\n    this.updateGameState(deltaTimeSeconds);\n    this.renderFrame();\n\n    requestAnimationFrame(this.gameLoop.bind(this));\n  }\n\n  private updateGameState(deltaTimeSeconds: number): void {\n    // Handle background toggle\n    if (this.keyboardInput.isKeyPressed('b')) {\n      this.backgroundRenderer.setUseBarrenBackground(\n        !this.backgroundRenderer.isUsingBarrenBackground()\n      );\n    }\n\n    // Handle planting input\n    if (this.plantingInputHandler) {\n      this.plantingInputHandler();\n    }\n\n    // Update game systems\n    this.playerMovement.updatePlayerMovement(deltaTimeSeconds);\n    this.plantManagement.updatePlantGrowth();\n  }\n\n  private renderFrame(): void {\n    // Clear canvas\n    this.renderingContext.clearRect(0, 0, CANVAS_CONFIG.width, CANVAS_CONFIG.height);\n\n    // Render background\n    this.backgroundRenderer.renderBackground(\n      this.gameAssets,\n      this.assetLoader.isBarrenAvailable()\n    );\n\n    // Render plants\n    this.plantRenderer.renderAllPlants(\n      this.plantManagement.getPlantedEntities(),\n      this.gameAssets\n    );\n\n    // Render player character\n    this.playerRenderer.renderPlayerCharacter(\n      this.playerMovement.getPlayerCharacter(),\n      this.gameAssets\n    );\n  }\n\n  // Utility methods for debugging\n  public getGameStats(): any {\n    return {\n      isRunning: this.isRunning,\n      assetsLoaded: this.assetLoader.areAllAssetsLoaded(),\n      loadingProgress: this.assetLoader.getLoadingProgress(),\n      plantCount: this.plantManagement.getPlantCount(),\n      playerPosition: {\n        x: this.playerMovement.getPlayerCharacter().xPosition,\n        y: this.playerMovement.getPlayerCharacter().yPosition\n      }\n    };\n  }\n}","/**\n * Growing Stars - Main Game Entry Point\n */\n\nimport { GameEngine } from './core/GameEngine';\n\n// Initialize and start the game\nconst initializeGame = async (): Promise<void> => {\n  try {\n    const gameEngine = new GameEngine('game-canvas');\n    \n    await gameEngine.initialize();\n    gameEngine.start();\n    \n    // Expose game engine to global scope for debugging\n    (window as any).gameEngine = gameEngine;\n    \n    console.log('Growing Stars game started successfully!');\n    console.log('Controls:');\n    console.log('- WASD: Move character');\n    console.log('- P: Plant seed at player location');  \n    console.log('- B: Toggle background');\n    console.log('- 1/2/3/4: Force player direction (testing)');\n    \n  } catch (error) {\n    console.error('Failed to initialize game:', error);\n  }\n};\n\n// Start the game when the page loads\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeGame);\n} else {\n  initializeGame();\n}"],"names":["SPRITE_SHEET_CONFIG","SPRITE_DIRECTIONS","RENDER_CONFIG","PLAYER_CONFIG","PLANT_CONFIG","CANVAS_CONFIG","ASSET_PATHS","AssetLoader","plantType","path","imageElement","assetPath","KeyboardInputManager","key","event","keyPressed","MouseInputManager","canvas","handler","index","canvasRectangle","clickPosition","PlayerMovementSystem","inputManager","spriteWidth","spriteHeight","deltaTimeSeconds","movementInput","horizontalMovement","verticalMovement","isMoving","diagonalNormalization","secondsPerFrame","displayWidth","displayHeight","halfWidth","halfHeight","PlantManagementSystem","currentTime","plant","total","mature","seeds","position","randomPlantType","newPlant","randomIndex","BackgroundRenderer","renderingContext","useBarren","assets","isBarrenAvailable","backgroundImage","barrenPattern","patternCanvas","patternContext","speckleIndex","speckleX","speckleY","PlantRenderer","plants","plantSprite","seedScale","sprite","xPosition","yPosition","scale","drawWidth","drawHeight","PlayerCharacterRenderer","columns","rows","player","sourceX","sourceY","GameEngine","canvasElementId","context","lastPlantTime","PLANT_COOLDOWN","plantingHandler","currentTimestamp","initializeGame","gameEngine","error"],"mappings":"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"}